{
    "name": "MetaJump",
    "displayName": "MetaJump",
    "description": "vscode cursor move/select/delete; jump, navigation, goto, acejump",
    "icon": "images/metajump.png",
    "version": "1.3.0",
    "publisher": "metaseed",
    "homepage": "https://github.com/metaseed/metaGo/tree/master/src/metaJump",
    "license": "MIT",
    "keywords": [
        "keyboard",
        "cursor",
        "jump",
        "jumpy",
        "goto",
        "navigation",
        "EasyMotion",
        "bookmark",
        "acejump",
        "metaGo",
        "delete",
        "center",
        "screen",
        "focus screen"
    ],
    "repository": {
        "type": "git",
        "url": "https://github.com/metaseed/metaGo/tree/master/src/metaJump"
    },
    "bugs": {
        "url": "https://github.com/metaseed/metaGo/issues",
        "email": "metaseed@gmail.com"
    },
    "changelog": "https://github.com/metaseed/metaGo/blob/master/src/metaJump/CHANGELOG.md",
    "manual": "https://github.com/metaseed/metaGo/blob/master/src/metaJump/README.md",
    "categories": [
        "Other"
    ],
    "activationEvents": [
        "*"
    ],
    "main": "./dist/extension",
    "contributes": {
        "commands": [
            {
                "command": "metaGo.input.cancel",
                "title": "xx: metaJump cancel"
            },
            {
                "command": "metaGo.metaJump.backspace",
                "title": "xx: metaJump step-cancel"
            },
            {
                "command": "metaGo.metaJump.hideDecoration",
                "title": "xx: metaJump hideDecoration"
            },
            {
                "command": "metaGo.metaJump.showLandingPage",
                "title": "xx: metaGo.metaJump.showLandingPage.ChangeLog, what's new"
            },
            {
                "command": "metaGo.gotoSmart",
                "title": "xx: metaGo.goto Smart"
            },
            {
                "command": "metaGo.gotoAfter",
                "title": "xx: metaGo.goto After"
            },
            {
                "command": "metaGo.gotoBefore",
                "title": "xx: metaGo.goto Before"
            },
            {
                "command": "metaGo.addCursorSmart",
                "title": "xx: metaGo.insertCursor Smart"
            },
            {
                "command": "metaGo.addCursorAfter",
                "title": "xx: metaGo.insertCursor After"
            },
            {
                "command": "metaGo.addCursorBefore",
                "title": "xx: metaGo.insertCursor Before"
            },
            {
                "command": "metaGo.gotoSmartActive",
                "title": "xx: metaGo.Goto Smart only in Active editor"
            },
            {
                "command": "metaGo.gotoAfterActive",
                "title": "xx: metaGo.Goto After only in Active editor"
            },
            {
                "command": "metaGo.gotoBeforeActive",
                "title": "xx: metaGo.goto Before only in Active editor"
            },
            {
                "command": "metaGo.selectSmart",
                "title": "xx: metaGo.Select to the cursor position Smartly"
            },
            {
                "command": "metaGo.selectBefore",
                "title": "xx: metaGo.Select to position Before the character"
            },
            {
                "command": "metaGo.selectAfter",
                "title": "xx: metaGo.Select to position After the character"
            },
            {
                "command": "metaGo.metaJump.deleteToSmart",
                "title": "xx: metaGo.delete from cursor to the position smartly"
            },
            {
                "command": "metaGo.metaJump.deleteToBefore",
                "title": "xx: metaGo.delete from cursor to the position before the target character"
            },
            {
                "command": "metaGo.metaJump.deleteToAfter",
                "title": "xx: metaGo.delete from cursor to the position after the target character"
            }
        ],
        "keybindings": [
            {
                "command": "metaGo.input.cancel",
                "key": "escape",
                "when": "editorTextFocus && metaGoInput"
            },
            {
                "command": "metaGo.metaJump.backspace",
                "key": "backspace",
                "when": "editorTextFocus && metaGoJumping"
            },
            {
                "command": "metaGo.metaJump.tab",
                "key": "tab",
                "when": "editorTextFocus && metaGoJumping"
            },
            {
                "command": "metaGo.metaJump.hideDecoration",
                "key": "shift+space",
                "when": "editorTextFocus && metaGoJumping"
            },
            {
                "command": "metaGo.gotoBefore",
                "key": "alt+,",
                "_description": "goto the character and set the cursor before the character"
            },
            {
                "command": "metaGo.gotoAfter",
                "key": "alt+.",
                "_description": "goto the character and set the cursor after the character"
            },
            {
                "command": "metaGo.gotoSmart",
                "key": "alt+/",
                "_description": "goto the character and set the cursor smartly"
            },
            {
                "command": "metaGo.addCursorBefore",
                "key": "ctrl+alt+,",
                "_description": "add another cursor before the character"
            },
            {
                "command": "metaGo.addCursorAfter",
                "key": "ctrl+alt+.",
                "_description": "add another cursor after the character"
            },
            {
                "command": "metaGo.addCursorSmart",
                "key": "ctrl+alt+/",
                "_description": "add another cursor to the character location smartly"
            },
            {
                "command": "metaGo.selectBefore",
                "key": "alt+shift+,",
                "when": "editorTextFocus",
                "_description": "select to the cursor position before the character"
            },
            {
                "command": "metaGo.selectAfter",
                "key": "alt+shift+.",
                "when": "editorTextFocus",
                "_description": "select to the cursor position after the character"
            },
            {
                "command": "metaGo.selectSmart",
                "key": "alt+shift+/",
                "when": "editorTextFocus",
                "_description": "select to the cursor position smartly"
            },
            {
                "command": "metaGo.metaJump.deleteToBefore",
                "key": "alt+backspace",
                "when": "editorTextFocus"
            },
            {
                "command": "metaGo.metaJump.deleteToAfter",
                "key": "alt+delete",
                "when": "editorTextFocus"
            },
            {
                "command": "metaGo.metaJump.deleteToSmart",
                "key": "alt+d",
                "when": "editorTextFocus"
            }
        ],
        "configuration": {
            "title": "metaseed metaJump",
            "type": "object",
            "properties": {
                "metaGo.decoration.useTextBasedDecorations": {
                    "type": "boolean",
                    "default": true,
                    "description": "Only enable if editor decorations are not showing. Use text-based decorations in editors instead of SVG based. Supports fewer customisations but may be more robust."
                },
                "metaGo.decoration.width": {
                    "type": "number",
                    "default": 8
                },
                "metaGo.decoration.height": {
                    "type": "number",
                    "default": 14,
                    "description": "only for svg based decoration"
                },
                "metaGo.decoration.fontSize": {
                    "type": "number",
                    "default": 14,
                    "description": "only for svg based decoration"
                },
                "metaGo.decoration.x": {
                    "type": "number",
                    "default": 1,
                    "description": "only for svg based decoration"
                },
                "metaGo.decoration.y": {
                    "type": "number",
                    "default": 12,
                    "description": "only for svg based decoration"
                },
                "metaGo.decoration.fontFamily": {
                    "type": "string",
                    "default": "'Operator Mono SSm Lig', 'Fira Code', Menlo, Monaco, 'Courier New', monospace",
                    "description": "only for svg based decoration"
                },
                "metaGo.decoration.fontWeight": {
                    "type": "string",
                    "default": "bold"
                },
                "metaGo.decoration.borderColor": {
                    "type": "string",
                    "default": "#1e1e1e"
                },
                "metaGo.decoration.matchBackground": {
                    "type": "string",
                    "default": "editor.wordHighlightBackground",
                    "description": "in sequential-target-chars jump, background color of matched chars"
                },
                "metaGo.decoration.targetFollowCharBackground": {
                    "type": "string",
                    "default": "#3058B888",
                    "description": "in sequential-target-chars jump, background color of the char follows target char"
                },
                "metaGo.decoration.backgroundOpacity": {
                    "type": "string",
                    "default": "0.8"
                },
                "metaGo.decoration.backgroundColor": {
                    "type": "string",
                    "default": "#4068FF,yellow",
                    "description": "code decorator background color for different code length"
                },
                "metaGo.decoration.color": {
                    "type": "string",
                    "default": "white,blue",
                    "description": "code decorator foreground color for different code length"
                },
                "metaGo.decoration.characters": {
                    "type": "string",
                    "default": "k, j, d, f, l, s, a, h, g, i, o, n, u, r, v, c, w, e, x, m, b, p, q, t, y, z"
                },
                "metaGo.decoration.additionalSingleCharCodeCharacters": {
                    "type": "string",
                    "default": "J,D,F,L,A,H,G,I,N,R,E,M,B,Q,T,Y",
                    "description": "only appears as one char decoration codes"
                },
                "metaGo.decoration.hide.triggerKey": {
                    "type": "string",
                    "default": "",
                    "description": "keyboard key, hold to hide decorators on screen, release to show again. Do NOT use any key in 'metaGo.decoration.characters', i.e. you could use '/' which is not in decoration.characters; empty string would disable this function. note: if this char is a target, sequential target chars is disabled. it's better to disable it and use the hide-decorator command"
                },
                "metaGo.decoration.hide.triggerKeyDownRepeatInitialDelay": {
                    "type": "number",
                    "default": "560",
                    "description": "unit: ms, initial time delay for the show event, this value is also used by the hideDecoration command as the delay time to show decoration, increase this number if your hide trigger key not work"
                },
                "metaGo.decoration.hide.triggerKeyDownRepeatInterval": {
                    "type": "number",
                    "default": "80",
                    "description": "unit: ms, increase this number if your hide trigger key not work"
                },
                "metaGo.jumper.timeout": {
                    "type": "number",
                    "default": "9",
                    "description": "timeout value in seconds to cancel metaGo jumper commands."
                },
                "metaGo.jumper.commandsToUseSingleTargetChar": {
                    "type": "string[]",
                    "default": [],
                    "description": "the names of the command to use the single target char, so could only type one target location char after command is triggered"
                }
            }
        }
    },
    "scripts": {
        "changelog": "node ../../changelog.js",
        "vscode:prepublish": "npm run changelog && webpack --mode production",
        "publish": "git tag -a %npm_package_name%V%npm_package_version% -m '%npm_package_name%V%npm_package_version%' && git push origin --tags && npm run publishOnly",
        "publishOnly": "vsce publish",
        "vscode:prepackage": "npm run changelog && webpack --mode production",
        "package": "vsce package -o release",
        "deploy": "npm run package && code --uninstall-extension metaseed.%npm_package_name% && code --install-extension release/%npm_package_name%-%npm_package_version%.vsix",
        "build": "webpack --mode development",
        "watch": "webpack --mode development --watch",
        "test-compile": "tsc -p ./",
        "lint": "tslint -p ./",
        "tswatch": "tsc -watch -p ./",
        "compile": "tsc -p ./",
        "pretest": "npm run compile",
        "test": "node ./out/test/runTest.js"
    },
    "engines": {
        "vscode": "^1.59.0"
    },
    "devDependencies": {
        "@types/mocha": "^9.0.0",
        "@types/node": "^16.6.1",
        "@types/vscode": "^1.59.0",
        "eslint": "^7.32.0",
        "mocha": "^9.0.3",
        "raw-loader": "^4.0.2",
        "source-map-support": "^0.5.19",
        "ts-loader": "^9.2.5",
        "typescript": "^4.3.5",
        "vsce": "^1.96.1",
        "webpack": "^5.51.1",
        "webpack-cli": "^4.8.0"
    },
    "dependencies": {
        "semver": "^7.3.5"
    }
}
